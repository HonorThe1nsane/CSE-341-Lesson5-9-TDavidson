
node_modules
.env

# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# TypeScript v1 declaration files
typings/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.test

# parcel-bundler cache (https://parceljs.org/)
.cache

# Next.js build output
.next

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and *not* Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port


################################################################
#For cars controller
# //Rest client
# const deleteCar = async (req, res) => {
#     const userId = new ObjectId(req.params.id);
#     const response = await mongodb.getDb().db().collection('cars').remove({ _id: userId }, true);
#     console.log(response);
#     if (response.deletedCount > 0) {
#         res.status(204).send();
#     } else {
#         res.status(500).json(response.error || 'Some error occurred while deleting the car.');
#     }
# };

# // Swagger

# // Delete a Car with the specified id in the request
# exports.delete = (req, res) => {
#     const id = req.params.id;

#     Cars.findByIdAndRemove(id)
#         .then((data) => {
#             if (!data) {
#                 res.status(404).send({
#                     message: `Cannot delete Car with id=${id}. Maybe the car was not found!`,
#                 });
#             } else {
#                 res.send({
#                     message: 'Car was deleted successfully!',
#                 });
#             }
#         })
#         .catch((err) => {
#             res.status(500).send({
#                 message: 'Could not delete Car with id=' + id,
#             });
#         });
# };
################################################################
#For cars routes
# router.post('/', [
#     check('carMake', 'Car make is required').not().isEmpty().trim().escape(),
#     check('carModel', 'Car model is required').not().isEmpty().trim().escape(),
#     check('engineSize', 'Engine size is required').not().isEmpty().trim().escape(),
#     check('color', 'Color is required').not().isEmpty().trim().escape(),
#     check('year', 'Year is required').not().isEmpty().trim().escape(),
#     check('price', 'Price is required').not().isEmpty().trim().escape()
# ], (req, res) => {
#     const errors = validationResult(req);
#     if (!errors.isEmpty()) {
#         console.log(errors.array());
#         return res.status(400).json({ errors: errors.array() });
#     }
#     carsController.createNewCar(req, res)
# });

#from routes.index import
# const { auth, requiresAuth } = require('express-openid-connect');
# const requiresAuthMiddleware = require('../requireAuth');

##from person routes
# const { check, validationResult } = require('express-validator');
#from routes cars
# router.post('/', [
#     check('carMake', 'Car make is required').not().isEmpty().trim().escape(),
#     check('carModel', 'Car model is required').not().isEmpty().trim().escape(),
#     check('engineSize', 'Engine size is required').not().isEmpty().trim().escape(),
#     check('color', 'Color is required').not().isEmpty().trim().escape(),
#     check('year', 'Year is required').not().isEmpty().trim().escape(),
#     check('price', 'Price is required').not().isEmpty().trim().escape()
# ], (req, res) => {
#     const errors = validationResult(req);
#     if (!errors.isEmpty()) {
#         console.log(errors.array());
#         return res.status(400).json({ errors: errors.array() });
#     }
#     carsController.createNewCar(req, res)
# });

# router.delete('/:id', carsController.deleteCar);
# # ### DELETE car
# DELETE http://localhost:8080/cars/63ea975ae7f4266cb0bc072d HTTP/1.1

# #### DELETE person
# DELETE http://localhost:8080/person/63eff280a6e3efd387f970c9 HTTP/1.1

# ### DELETE cars
# DELETE https://cse-341-personal-assignments-troy-d.onrender.com/cars/633b844a2ffdf3c327b3dc9c HTTP/1.1

# router.delete('/:id', personController.deletePerson);